name: Deploy Task Management App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  terraform-output:
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.tf-output.outputs.cluster_name }}
      ecr_repository: ${{ steps.tf-output.outputs.ecr_repository }}
      mongodb_host: ${{ steps.tf-output.outputs.mongodb_host }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Get Terraform Outputs
        id: tf-output
        run: |
          cd terraform
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "ecr_repository=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "mongodb_host=$(terraform output -raw mongodb_host)" >> $GITHUB_OUTPUT

  build-and-deploy:
    needs: terraform-output
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and test application
        run: |
          npm ci
          npm run build
          npm run test

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ needs.terraform-output.outputs.ecr_repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY:$IMAGE_TAG .
          docker push $ECR_REGISTRY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ needs.terraform-output.outputs.cluster_name }}

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ needs.terraform-output.outputs.ecr_repository }}
          IMAGE_TAG: ${{ github.sha }}
          MONGODB_HOST: ${{ needs.terraform-output.outputs.mongodb_host }}
        run: |
          # Create MongoDB secrets
          kubectl create secret generic mongodb-secret \
            --from-literal=host=${{ needs.terraform-output.outputs.mongodb_host }} \
            --from-literal=username=${{ secrets.MONGODB_USERNAME }} \
            --from-literal=password=${{ secrets.MONGODB_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

          # Update deployment manifest with dynamic values
          cat k8s/deployment.yml | \
          sed "s|\${AWS_ACCOUNT_ID}.*|\${ECR_REGISTRY}:${IMAGE_TAG}|g" | \
          kubectl apply -f -
          
          kubectl apply -f k8s/service.yml
          kubectl apply -f k8s/ingress.yml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/task-management-frontend --timeout=300s

      - name: Clean up
        if: always()
        run: |
          kubectl delete secret mongodb-secret --ignore-not-found
          docker logout ${{ needs.terraform-output.outputs.ecr_repository }}